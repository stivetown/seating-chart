{"ast":null,"code":"// Enhanced matching algorithm based on business strategy\nexport function calculateGroupFit(member,group){if(group.members.length===0)return 0;let score=0;let dealBreakers=0;// DEAL BREAKER #1: Same Industry Category (prevents direct competition)\nconst sameIndustryMembers=group.members.filter(m=>m.categories.some(cat=>member.categories.includes(cat)));if(sameIndustryMembers.length>0){dealBreakers+=50;// Heavy penalty for same industry\n}// DEAL BREAKER #2: Same Geographic Market (prevents local competition)\nconst memberLocation=extractLocation(member.location||'');const sameLocationMembers=group.members.filter(m=>{const memberLoc=extractLocation(m.location||'');return isSameMetroArea(memberLocation,memberLoc);});if(sameLocationMembers.length>0){dealBreakers+=40;// Heavy penalty for same location\n}// PRIMARY FACTOR #1: Years Within Industry (±2 years compatibility) - 30%\nconst memberYears=member.yearsInIndustry||0;const groupYears=group.members.map(m=>m.yearsInIndustry||0);const avgGroupYears=groupYears.reduce((a,b)=>a+b,0)/groupYears.length;const yearsDiff=Math.abs(memberYears-avgGroupYears);let yearsScore=0;if(yearsDiff<=2)yearsScore=100;else if(yearsDiff<=4)yearsScore=75;else if(yearsDiff<=6)yearsScore=50;else yearsScore=25;score+=yearsScore*0.3;// PRIMARY FACTOR #2: Average Revenue Per Booking (±25% compatibility) - 30%\nconst memberRevenue=parseRevenue(member.averageRevenue);const groupRevenues=group.members.map(m=>parseRevenue(m.averageRevenue)).filter(r=>r>0);if(groupRevenues.length>0&&memberRevenue>0){const avgGroupRevenue=groupRevenues.reduce((a,b)=>a+b,0)/groupRevenues.length;const revenueDiff=Math.abs(memberRevenue-avgGroupRevenue)/avgGroupRevenue;let revenueScore=0;if(revenueDiff<=0.25)revenueScore=100;else if(revenueDiff<=0.5)revenueScore=75;else if(revenueDiff<=0.75)revenueScore=50;else revenueScore=25;score+=revenueScore*0.3;}// PRIMARY FACTOR #3: Business Maturity (company founding date) - 20%\nconst memberFounded=new Date(member.companyFounded||Date.now()).getFullYear();const currentYear=new Date().getFullYear();const memberBusinessAge=currentYear-memberFounded;const groupBusinessAges=group.members.map(m=>{const founded=new Date(m.companyFounded||Date.now()).getFullYear();return currentYear-founded;});const avgGroupBusinessAge=groupBusinessAges.reduce((a,b)=>a+b,0)/groupBusinessAges.length;const businessAgeDiff=Math.abs(memberBusinessAge-avgGroupBusinessAge);let businessAgeScore=0;if(businessAgeDiff<=3)businessAgeScore=100;else if(businessAgeDiff<=6)businessAgeScore=75;else if(businessAgeDiff<=10)businessAgeScore=50;else businessAgeScore=25;score+=businessAgeScore*0.2;// SECONDARY FACTOR: Group size optimization - 10%\nconst sizeScore=group.members.length<=6?100:Math.max(0,100-(group.members.length-6)*10);score+=sizeScore*0.1;// SECONDARY FACTOR: Annual Revenue Scale (backup/validation) - 10%\nconst memberAnnualRevenue=parseAnnualRevenue(member.annualRevenue);const groupAnnualRevenues=group.members.map(m=>parseAnnualRevenue(m.annualRevenue)).filter(r=>r>0);if(groupAnnualRevenues.length>0&&memberAnnualRevenue>0){const avgGroupAnnualRevenue=groupAnnualRevenues.reduce((a,b)=>a+b,0)/groupAnnualRevenues.length;const annualRevenueDiff=Math.abs(memberAnnualRevenue-avgGroupAnnualRevenue)/avgGroupAnnualRevenue;let annualRevenueScore=0;if(annualRevenueDiff<=0.5)annualRevenueScore=100;else if(annualRevenueDiff<=1.0)annualRevenueScore=75;else annualRevenueScore=50;score+=annualRevenueScore*0.1;}// Apply deal breaker penalties\nscore=Math.max(0,score-dealBreakers);return Math.round(score);}// Generate group suggestions with new logic\nexport function generateGroupSuggestions(member,groups){const suggestions=groups.filter(group=>group.members.length>0).map(group=>{const score=calculateGroupFit(member,group);const reasons=[];const potentialIssues=[];// Check for deal breakers\nconst sameIndustryMembers=group.members.filter(m=>m.categories.some(cat=>member.categories.includes(cat)));if(sameIndustryMembers.length>0){potentialIssues.push(\"Same industry: \".concat(sameIndustryMembers.map(m=>m.name).join(', ')));}const memberLocation=extractLocation(member.location||'');const sameLocationMembers=group.members.filter(m=>{const memberLoc=extractLocation(m.location||'');return isSameMetroArea(memberLocation,memberLoc);});if(sameLocationMembers.length>0){potentialIssues.push(\"Same market: \".concat(sameLocationMembers.map(m=>m.name).join(', ')));}// Positive matching factors\nconst memberYears=member.yearsInIndustry||0;const groupYears=group.members.map(m=>m.yearsInIndustry||0);const avgGroupYears=groupYears.reduce((a,b)=>a+b,0)/groupYears.length;const yearsDiff=Math.abs(memberYears-avgGroupYears);if(yearsDiff<=2){reasons.push(\"Similar experience level (\".concat(memberYears,\" vs \").concat(Math.round(avgGroupYears),\" years)\"));}const memberRevenue=parseRevenue(member.averageRevenue);const groupRevenues=group.members.map(m=>parseRevenue(m.averageRevenue)).filter(r=>r>0);if(groupRevenues.length>0&&memberRevenue>0){const avgGroupRevenue=groupRevenues.reduce((a,b)=>a+b,0)/groupRevenues.length;const revenueDiff=Math.abs(memberRevenue-avgGroupRevenue)/avgGroupRevenue;if(revenueDiff<=0.25){reasons.push(\"Similar pricing tier ($\".concat(formatRevenue(memberRevenue),\" vs $\").concat(formatRevenue(avgGroupRevenue),\" avg)\"));}}// Cross-industry learning opportunity\nconst uniqueIndustries=group.members.flatMap(m=>m.categories).filter((cat,index,arr)=>arr.indexOf(cat)===index).filter(cat=>!member.categories.includes(cat));if(uniqueIndustries.length>0){reasons.push(\"Cross-industry learning: \".concat(uniqueIndustries.slice(0,2).join(', ')));}return{groupId:group.id,groupName:group.name,score,reasons,potentialIssues:potentialIssues.length>0?potentialIssues:undefined};}).sort((a,b)=>b.score-a.score).slice(0,3);return suggestions;}// Helper functions for new matching logic\nfunction extractLocation(location){// Clean up location string and extract city/state\nconst cleaned=location.replace(/['\"]/g,'').trim();// Handle various formats: \"City, State\", \"City State\", etc.\nconst parts=cleaned.split(',').map(p=>p.trim());if(parts.length>=2){return{city:parts[0].toLowerCase(),state:parts[1].toLowerCase(),region:getRegion(parts[1].toLowerCase())};}return{city:cleaned.toLowerCase(),state:'',region:getRegion(cleaned.toLowerCase())};}function isSameMetroArea(loc1,loc2){if(!loc1.city||!loc2.city)return false;// Same city\nif(loc1.city===loc2.city)return true;// Major metro areas\nconst metroAreas=[['new york','brooklyn','manhattan','queens','bronx','staten island','jersey city','hoboken'],['los angeles','hollywood','beverly hills','santa monica','manhattan beach','pasadena'],['chicago','evanston','oak park','schaumburg'],['boston','cambridge','somerville','newton','brookline'],['san francisco','oakland','berkeley','palo alto','san jose'],['dallas','fort worth','plano','frisco','irving'],['miami','fort lauderdale','boca raton','coral gables']];for(const metro of metroAreas){if(metro.includes(loc1.city)&&metro.includes(loc2.city)){return true;}}return false;}function getRegion(location){const eastCoast=['new york','ny','massachusetts','ma','connecticut','ct','new jersey','nj','pennsylvania','pa'];const westCoast=['california','ca','oregon','or','washington','wa'];const south=['florida','fl','texas','tx','north carolina','nc','south carolina','sc','georgia','ga'];const midwest=['illinois','il','michigan','mi','ohio','oh','wisconsin','wi','minnesota','mn'];const loc=location.toLowerCase();if(eastCoast.some(state=>loc.includes(state)))return'east';if(westCoast.some(state=>loc.includes(state)))return'west';if(south.some(state=>loc.includes(state)))return'south';if(midwest.some(state=>loc.includes(state)))return'midwest';return'other';}function parseRevenue(revenueStr){if(!revenueStr)return 0;// Remove currency symbols and commas\nconst cleaned=revenueStr.replace(/[\\$,]/g,'');const num=parseFloat(cleaned);return isNaN(num)?0:num;}function parseAnnualRevenue(revenueRange){if(!revenueRange)return 0;const ranges={'$200K and below':150000,'$200-300K':250000,'$300-400K':350000,'$400-500K':450000,'$500-600K':550000,'$600-700K':650000,'$700-800K':750000,'$800-900K':850000,'$900K-1M':950000,'$1-1.5M':1250000,'$1.5-2M':1750000,'$2-3M':2500000,'$3-4M':3500000,'$4-5M':4500000,'$5M+':6000000};return ranges[revenueRange]||0;}function formatRevenue(revenue){if(revenue>=1000000){return\"\".concat((revenue/1000000).toFixed(1),\"M\");}else if(revenue>=1000){return\"\".concat((revenue/1000).toFixed(0),\"K\");}return revenue.toString();}// Keep existing functions for compatibility\nexport function analyzeGroupAlerts(groups){const alerts=[];groups.forEach(group=>{if(group.members.length<2)return;// Alert for same industry members (now a major issue)\nconst industryMap={};group.members.forEach(member=>{member.categories.forEach(cat=>{if(!industryMap[cat])industryMap[cat]=[];industryMap[cat].push(member.name);});});Object.entries(industryMap).forEach(_ref=>{let[industry,members]=_ref;if(members.length>1){alerts.push({groupId:group.id,groupName:group.name,type:'experience_mismatch',// Reusing existing type\nseverity:'high',description:\"Direct competitors in \".concat(industry,\": \").concat(members.join(', ')),affectedMembers:members});}});// Alert for same location members\nconst locationMap={};group.members.forEach(member=>{const location=extractLocation(member.location||'');const key=\"\".concat(location.city,\", \").concat(location.state);if(!locationMap[key])locationMap[key]=[];locationMap[key].push(member.name);});Object.entries(locationMap).forEach(_ref2=>{let[location,members]=_ref2;if(members.length>1){alerts.push({groupId:group.id,groupName:group.name,type:'price_mismatch',// Reusing existing type\nseverity:'medium',description:\"Same market area (\".concat(location,\"): \").concat(members.join(', ')),affectedMembers:members});}});});return alerts.sort((a,b)=>{const severityOrder={high:3,medium:2,low:1};return severityOrder[b.severity]-severityOrder[a.severity];});}// Update group statistics calculation\nexport function calculateGroupStats(group){if(group.members.length===0){return{averageExperience:0,dominantPriceTier:'',categories:[]};}// Calculate average years in industry\nconst avgExp=group.members.reduce((sum,member)=>{return sum+(member.yearsInIndustry||0);},0)/group.members.length;// Find dominant revenue tier\nconst revenueTiers=group.members.map(m=>m.annualRevenue||'Unknown');const tierCounts=revenueTiers.reduce((acc,tier)=>{acc[tier]=(acc[tier]||0)+1;return acc;},{});const dominantPriceTier=Object.entries(tierCounts).sort((_ref3,_ref4)=>{let[,a]=_ref3;let[,b]=_ref4;return b-a;})[0][0];// Collect unique categories\nconst allCats=group.members.flatMap(m=>m.categories);const categories=allCats.filter((cat,index)=>allCats.indexOf(cat)===index);return{averageExperience:Math.round(avgExp*100)/100,dominantPriceTier,categories};}// Helper function to get experience label from score\nfunction getExperienceLabel(score){const rounded=Math.round(score);switch(rounded){case 1:return'Beginner';case 2:return'Intermediate';case 3:return'Advanced';case 4:return'Expert';default:return'Unknown';}}// Validate member data\nexport function validateMemberData(member){var _member$name,_member$email,_member$location;const errors=[];if(!((_member$name=member.name)!==null&&_member$name!==void 0&&_member$name.trim())){errors.push('Name is required');}if(!((_member$email=member.email)!==null&&_member$email!==void 0&&_member$email.trim())){errors.push('Email is required');}else if(!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(member.email)){errors.push('Invalid email format');}if(!member.yearsInIndustry||member.yearsInIndustry<0){errors.push('Years in industry is required');}if(!member.categories||member.categories.length===0){errors.push('At least one category is required');}if(!((_member$location=member.location)!==null&&_member$location!==void 0&&_member$location.trim())){errors.push('Location is required');}return errors;}","map":{"version":3,"names":["calculateGroupFit","member","group","members","length","score","dealBreakers","sameIndustryMembers","filter","m","categories","some","cat","includes","memberLocation","extractLocation","location","sameLocationMembers","memberLoc","isSameMetroArea","memberYears","yearsInIndustry","groupYears","map","avgGroupYears","reduce","a","b","yearsDiff","Math","abs","yearsScore","memberRevenue","parseRevenue","averageRevenue","groupRevenues","r","avgGroupRevenue","revenueDiff","revenueScore","memberFounded","Date","companyFounded","now","getFullYear","currentYear","memberBusinessAge","groupBusinessAges","founded","avgGroupBusinessAge","businessAgeDiff","businessAgeScore","sizeScore","max","memberAnnualRevenue","parseAnnualRevenue","annualRevenue","groupAnnualRevenues","avgGroupAnnualRevenue","annualRevenueDiff","annualRevenueScore","round","generateGroupSuggestions","groups","suggestions","reasons","potentialIssues","push","concat","name","join","formatRevenue","uniqueIndustries","flatMap","index","arr","indexOf","slice","groupId","id","groupName","undefined","sort","cleaned","replace","trim","parts","split","p","city","toLowerCase","state","region","getRegion","loc1","loc2","metroAreas","metro","eastCoast","westCoast","south","midwest","loc","revenueStr","num","parseFloat","isNaN","revenueRange","ranges","revenue","toFixed","toString","analyzeGroupAlerts","alerts","forEach","industryMap","Object","entries","_ref","industry","type","severity","description","affectedMembers","locationMap","key","_ref2","severityOrder","high","medium","low","calculateGroupStats","averageExperience","dominantPriceTier","avgExp","sum","revenueTiers","tierCounts","acc","tier","_ref3","_ref4","allCats","getExperienceLabel","rounded","validateMemberData","_member$name","_member$email","_member$location","errors","email","test"],"sources":["/Users/mstiverson/Cursor/freeda_internal_match/src/utils/matching.ts"],"sourcesContent":["import { Member, Group, GroupSuggestion, GroupAlert, EXPERIENCE_SCORES } from '../types';\n\n// Enhanced matching algorithm based on business strategy\nexport function calculateGroupFit(member: Member, group: Group): number {\n  if (group.members.length === 0) return 0;\n\n  let score = 0;\n  let dealBreakers = 0;\n\n  // DEAL BREAKER #1: Same Industry Category (prevents direct competition)\n  const sameIndustryMembers = group.members.filter(m => \n    m.categories.some(cat => member.categories.includes(cat))\n  );\n  if (sameIndustryMembers.length > 0) {\n    dealBreakers += 50; // Heavy penalty for same industry\n  }\n\n  // DEAL BREAKER #2: Same Geographic Market (prevents local competition)\n  const memberLocation = extractLocation(member.location || '');\n  const sameLocationMembers = group.members.filter(m => {\n    const memberLoc = extractLocation(m.location || '');\n    return isSameMetroArea(memberLocation, memberLoc);\n  });\n  if (sameLocationMembers.length > 0) {\n    dealBreakers += 40; // Heavy penalty for same location\n  }\n\n  // PRIMARY FACTOR #1: Years Within Industry (±2 years compatibility) - 30%\n  const memberYears = member.yearsInIndustry || 0;\n  const groupYears = group.members.map(m => m.yearsInIndustry || 0);\n  const avgGroupYears = groupYears.reduce((a, b) => a + b, 0) / groupYears.length;\n  const yearsDiff = Math.abs(memberYears - avgGroupYears);\n  \n  let yearsScore = 0;\n  if (yearsDiff <= 2) yearsScore = 100;\n  else if (yearsDiff <= 4) yearsScore = 75;\n  else if (yearsDiff <= 6) yearsScore = 50;\n  else yearsScore = 25;\n  \n  score += yearsScore * 0.3;\n\n  // PRIMARY FACTOR #2: Average Revenue Per Booking (±25% compatibility) - 30%\n  const memberRevenue = parseRevenue(member.averageRevenue);\n  const groupRevenues = group.members\n    .map(m => parseRevenue(m.averageRevenue))\n    .filter(r => r > 0);\n  \n  if (groupRevenues.length > 0 && memberRevenue > 0) {\n    const avgGroupRevenue = groupRevenues.reduce((a, b) => a + b, 0) / groupRevenues.length;\n    const revenueDiff = Math.abs(memberRevenue - avgGroupRevenue) / avgGroupRevenue;\n    \n    let revenueScore = 0;\n    if (revenueDiff <= 0.25) revenueScore = 100;\n    else if (revenueDiff <= 0.5) revenueScore = 75;\n    else if (revenueDiff <= 0.75) revenueScore = 50;\n    else revenueScore = 25;\n    \n    score += revenueScore * 0.3;\n  }\n\n  // PRIMARY FACTOR #3: Business Maturity (company founding date) - 20%\n  const memberFounded = new Date(member.companyFounded || Date.now()).getFullYear();\n  const currentYear = new Date().getFullYear();\n  const memberBusinessAge = currentYear - memberFounded;\n  \n  const groupBusinessAges = group.members.map(m => {\n    const founded = new Date(m.companyFounded || Date.now()).getFullYear();\n    return currentYear - founded;\n  });\n  const avgGroupBusinessAge = groupBusinessAges.reduce((a, b) => a + b, 0) / groupBusinessAges.length;\n  const businessAgeDiff = Math.abs(memberBusinessAge - avgGroupBusinessAge);\n  \n  let businessAgeScore = 0;\n  if (businessAgeDiff <= 3) businessAgeScore = 100;\n  else if (businessAgeDiff <= 6) businessAgeScore = 75;\n  else if (businessAgeDiff <= 10) businessAgeScore = 50;\n  else businessAgeScore = 25;\n  \n  score += businessAgeScore * 0.2;\n\n  // SECONDARY FACTOR: Group size optimization - 10%\n  const sizeScore = group.members.length <= 6 ? 100 : Math.max(0, 100 - (group.members.length - 6) * 10);\n  score += sizeScore * 0.1;\n\n  // SECONDARY FACTOR: Annual Revenue Scale (backup/validation) - 10%\n  const memberAnnualRevenue = parseAnnualRevenue(member.annualRevenue);\n  const groupAnnualRevenues = group.members\n    .map(m => parseAnnualRevenue(m.annualRevenue))\n    .filter(r => r > 0);\n    \n  if (groupAnnualRevenues.length > 0 && memberAnnualRevenue > 0) {\n    const avgGroupAnnualRevenue = groupAnnualRevenues.reduce((a, b) => a + b, 0) / groupAnnualRevenues.length;\n    const annualRevenueDiff = Math.abs(memberAnnualRevenue - avgGroupAnnualRevenue) / avgGroupAnnualRevenue;\n    \n    let annualRevenueScore = 0;\n    if (annualRevenueDiff <= 0.5) annualRevenueScore = 100;\n    else if (annualRevenueDiff <= 1.0) annualRevenueScore = 75;\n    else annualRevenueScore = 50;\n    \n    score += annualRevenueScore * 0.1;\n  }\n\n  // Apply deal breaker penalties\n  score = Math.max(0, score - dealBreakers);\n\n  return Math.round(score);\n}\n\n// Generate group suggestions with new logic\nexport function generateGroupSuggestions(member: Member, groups: Group[]): GroupSuggestion[] {\n  const suggestions = groups\n    .filter(group => group.members.length > 0)\n    .map(group => {\n      const score = calculateGroupFit(member, group);\n      const reasons: string[] = [];\n      const potentialIssues: string[] = [];\n\n      // Check for deal breakers\n      const sameIndustryMembers = group.members.filter(m => \n        m.categories.some(cat => member.categories.includes(cat))\n      );\n      if (sameIndustryMembers.length > 0) {\n        potentialIssues.push(`Same industry: ${sameIndustryMembers.map(m => m.name).join(', ')}`);\n      }\n\n      const memberLocation = extractLocation(member.location || '');\n      const sameLocationMembers = group.members.filter(m => {\n        const memberLoc = extractLocation(m.location || '');\n        return isSameMetroArea(memberLocation, memberLoc);\n      });\n      if (sameLocationMembers.length > 0) {\n        potentialIssues.push(`Same market: ${sameLocationMembers.map(m => m.name).join(', ')}`);\n      }\n\n      // Positive matching factors\n      const memberYears = member.yearsInIndustry || 0;\n      const groupYears = group.members.map(m => m.yearsInIndustry || 0);\n      const avgGroupYears = groupYears.reduce((a, b) => a + b, 0) / groupYears.length;\n      const yearsDiff = Math.abs(memberYears - avgGroupYears);\n      \n      if (yearsDiff <= 2) {\n        reasons.push(`Similar experience level (${memberYears} vs ${Math.round(avgGroupYears)} years)`);\n      }\n\n      const memberRevenue = parseRevenue(member.averageRevenue);\n      const groupRevenues = group.members\n        .map(m => parseRevenue(m.averageRevenue))\n        .filter(r => r > 0);\n      \n      if (groupRevenues.length > 0 && memberRevenue > 0) {\n        const avgGroupRevenue = groupRevenues.reduce((a, b) => a + b, 0) / groupRevenues.length;\n        const revenueDiff = Math.abs(memberRevenue - avgGroupRevenue) / avgGroupRevenue;\n        \n        if (revenueDiff <= 0.25) {\n          reasons.push(`Similar pricing tier ($${formatRevenue(memberRevenue)} vs $${formatRevenue(avgGroupRevenue)} avg)`);\n        }\n      }\n\n      // Cross-industry learning opportunity\n      const uniqueIndustries = group.members\n        .flatMap(m => m.categories)\n        .filter((cat, index, arr) => arr.indexOf(cat) === index)\n        .filter(cat => !member.categories.includes(cat));\n      \n      if (uniqueIndustries.length > 0) {\n        reasons.push(`Cross-industry learning: ${uniqueIndustries.slice(0, 2).join(', ')}`);\n      }\n\n      return {\n        groupId: group.id,\n        groupName: group.name,\n        score,\n        reasons,\n        potentialIssues: potentialIssues.length > 0 ? potentialIssues : undefined\n      };\n    })\n    .sort((a, b) => b.score - a.score)\n    .slice(0, 3);\n\n  return suggestions;\n}\n\n// Helper functions for new matching logic\nfunction extractLocation(location: string): { city: string; state: string; region: string } {\n  // Clean up location string and extract city/state\n  const cleaned = location.replace(/['\"]/g, '').trim();\n  \n  // Handle various formats: \"City, State\", \"City State\", etc.\n  const parts = cleaned.split(',').map(p => p.trim());\n  \n  if (parts.length >= 2) {\n    return {\n      city: parts[0].toLowerCase(),\n      state: parts[1].toLowerCase(),\n      region: getRegion(parts[1].toLowerCase())\n    };\n  }\n  \n  return {\n    city: cleaned.toLowerCase(),\n    state: '',\n    region: getRegion(cleaned.toLowerCase())\n  };\n}\n\nfunction isSameMetroArea(loc1: any, loc2: any): boolean {\n  if (!loc1.city || !loc2.city) return false;\n  \n  // Same city\n  if (loc1.city === loc2.city) return true;\n  \n  // Major metro areas\n  const metroAreas = [\n    ['new york', 'brooklyn', 'manhattan', 'queens', 'bronx', 'staten island', 'jersey city', 'hoboken'],\n    ['los angeles', 'hollywood', 'beverly hills', 'santa monica', 'manhattan beach', 'pasadena'],\n    ['chicago', 'evanston', 'oak park', 'schaumburg'],\n    ['boston', 'cambridge', 'somerville', 'newton', 'brookline'],\n    ['san francisco', 'oakland', 'berkeley', 'palo alto', 'san jose'],\n    ['dallas', 'fort worth', 'plano', 'frisco', 'irving'],\n    ['miami', 'fort lauderdale', 'boca raton', 'coral gables']\n  ];\n  \n  for (const metro of metroAreas) {\n    if (metro.includes(loc1.city) && metro.includes(loc2.city)) {\n      return true;\n    }\n  }\n  \n  return false;\n}\n\nfunction getRegion(location: string): string {\n  const eastCoast = ['new york', 'ny', 'massachusetts', 'ma', 'connecticut', 'ct', 'new jersey', 'nj', 'pennsylvania', 'pa'];\n  const westCoast = ['california', 'ca', 'oregon', 'or', 'washington', 'wa'];\n  const south = ['florida', 'fl', 'texas', 'tx', 'north carolina', 'nc', 'south carolina', 'sc', 'georgia', 'ga'];\n  const midwest = ['illinois', 'il', 'michigan', 'mi', 'ohio', 'oh', 'wisconsin', 'wi', 'minnesota', 'mn'];\n  \n  const loc = location.toLowerCase();\n  \n  if (eastCoast.some(state => loc.includes(state))) return 'east';\n  if (westCoast.some(state => loc.includes(state))) return 'west';\n  if (south.some(state => loc.includes(state))) return 'south';\n  if (midwest.some(state => loc.includes(state))) return 'midwest';\n  \n  return 'other';\n}\n\nfunction parseRevenue(revenueStr: string | undefined): number {\n  if (!revenueStr) return 0;\n  \n  // Remove currency symbols and commas\n  const cleaned = revenueStr.replace(/[\\$,]/g, '');\n  const num = parseFloat(cleaned);\n  \n  return isNaN(num) ? 0 : num;\n}\n\nfunction parseAnnualRevenue(revenueRange: string | undefined): number {\n  if (!revenueRange) return 0;\n  \n  const ranges: { [key: string]: number } = {\n    '$200K and below': 150000,\n    '$200-300K': 250000,\n    '$300-400K': 350000,\n    '$400-500K': 450000,\n    '$500-600K': 550000,\n    '$600-700K': 650000,\n    '$700-800K': 750000,\n    '$800-900K': 850000,\n    '$900K-1M': 950000,\n    '$1-1.5M': 1250000,\n    '$1.5-2M': 1750000,\n    '$2-3M': 2500000,\n    '$3-4M': 3500000,\n    '$4-5M': 4500000,\n    '$5M+': 6000000\n  };\n  \n  return ranges[revenueRange] || 0;\n}\n\nfunction formatRevenue(revenue: number): string {\n  if (revenue >= 1000000) {\n    return `${(revenue / 1000000).toFixed(1)}M`;\n  } else if (revenue >= 1000) {\n    return `${(revenue / 1000).toFixed(0)}K`;\n  }\n  return revenue.toString();\n}\n\n// Keep existing functions for compatibility\nexport function analyzeGroupAlerts(groups: Group[]): GroupAlert[] {\n  const alerts: GroupAlert[] = [];\n\n  groups.forEach(group => {\n    if (group.members.length < 2) return;\n\n    // Alert for same industry members (now a major issue)\n    const industryMap: { [key: string]: string[] } = {};\n    group.members.forEach(member => {\n      member.categories.forEach(cat => {\n        if (!industryMap[cat]) industryMap[cat] = [];\n        industryMap[cat].push(member.name);\n      });\n    });\n\n    Object.entries(industryMap).forEach(([industry, members]) => {\n      if (members.length > 1) {\n        alerts.push({\n          groupId: group.id,\n          groupName: group.name,\n          type: 'experience_mismatch', // Reusing existing type\n          severity: 'high',\n          description: `Direct competitors in ${industry}: ${members.join(', ')}`,\n          affectedMembers: members\n        });\n      }\n    });\n\n    // Alert for same location members\n    const locationMap: { [key: string]: string[] } = {};\n    group.members.forEach(member => {\n      const location = extractLocation(member.location || '');\n      const key = `${location.city}, ${location.state}`;\n      if (!locationMap[key]) locationMap[key] = [];\n      locationMap[key].push(member.name);\n    });\n\n    Object.entries(locationMap).forEach(([location, members]) => {\n      if (members.length > 1) {\n        alerts.push({\n          groupId: group.id,\n          groupName: group.name,\n          type: 'price_mismatch', // Reusing existing type\n          severity: 'medium',\n          description: `Same market area (${location}): ${members.join(', ')}`,\n          affectedMembers: members\n        });\n      }\n    });\n  });\n\n  return alerts.sort((a, b) => {\n    const severityOrder = { high: 3, medium: 2, low: 1 };\n    return severityOrder[b.severity] - severityOrder[a.severity];\n  });\n}\n\n// Update group statistics calculation\nexport function calculateGroupStats(group: Group): {\n  averageExperience: number;\n  dominantPriceTier: string;\n  categories: string[];\n} {\n  if (group.members.length === 0) {\n    return {\n      averageExperience: 0,\n      dominantPriceTier: '',\n      categories: []\n    };\n  }\n\n  // Calculate average years in industry\n  const avgExp = group.members.reduce((sum, member) => {\n    return sum + (member.yearsInIndustry || 0);\n  }, 0) / group.members.length;\n\n  // Find dominant revenue tier\n  const revenueTiers = group.members.map(m => m.annualRevenue || 'Unknown');\n  const tierCounts = revenueTiers.reduce((acc, tier) => {\n    acc[tier] = (acc[tier] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n\n  const dominantPriceTier = Object.entries(tierCounts)\n    .sort(([,a], [,b]) => b - a)[0][0];\n\n  // Collect unique categories\n  const allCats = group.members.flatMap(m => m.categories);\n  const categories = allCats.filter((cat, index) => allCats.indexOf(cat) === index);\n\n  return {\n    averageExperience: Math.round(avgExp * 100) / 100,\n    dominantPriceTier,\n    categories\n  };\n}\n\n// Helper function to get experience label from score\nfunction getExperienceLabel(score: number): string {\n  const rounded = Math.round(score);\n  switch (rounded) {\n    case 1: return 'Beginner';\n    case 2: return 'Intermediate';\n    case 3: return 'Advanced';\n    case 4: return 'Expert';\n    default: return 'Unknown';\n  }\n}\n\n// Validate member data\nexport function validateMemberData(member: Partial<Member>): string[] {\n  const errors: string[] = [];\n\n  if (!member.name?.trim()) {\n    errors.push('Name is required');\n  }\n\n  if (!member.email?.trim()) {\n    errors.push('Email is required');\n  } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(member.email)) {\n    errors.push('Invalid email format');\n  }\n\n  if (!member.yearsInIndustry || member.yearsInIndustry < 0) {\n    errors.push('Years in industry is required');\n  }\n\n  if (!member.categories || member.categories.length === 0) {\n    errors.push('At least one category is required');\n  }\n\n  if (!member.location?.trim()) {\n    errors.push('Location is required');\n  }\n\n  return errors;\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}