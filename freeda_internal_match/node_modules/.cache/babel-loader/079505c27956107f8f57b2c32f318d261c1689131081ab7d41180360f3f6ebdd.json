{"ast":null,"code":"import _objectSpread from\"/Users/mstiverson/Cursor/freeda_internal_match/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useState,useEffect}from'react';import{generateGroupSuggestions,calculateGroupStats}from'../utils/matching';import{parseCSVToMembers}from'../utils/csvParser';import{loadSecureMemberData}from'../data/members';export function useMembers(){const[members,setMembers]=useState([]);const[groups,setGroups]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);// Load real CSV data\nuseEffect(()=>{loadCSVData();},[]);const loadCSVData=async()=>{try{setLoading(true);setError(null);// Load the secure CSV data\nconst csvText=await loadSecureMemberData();const parsedMembers=parseCSVToMembers(csvText);// Initialize groups from existing group assignments\nconst existingGroups=new Map();parsedMembers.forEach(member=>{if(member.groupId){if(!existingGroups.has(member.groupId)){const groupNumber=member.groupId.replace('G','');existingGroups.set(member.groupId,{id:member.groupId,name:\"Group \".concat(groupNumber),members:[],averageExperience:0,dominantPriceTier:'',categories:[],createdDate:new Date().toISOString().split('T')[0],lastActivity:new Date().toISOString().split('T')[0]});}const group=existingGroups.get(member.groupId);group.members.push(member);}});// Calculate group statistics\nexistingGroups.forEach(group=>{const stats=calculateGroupStats(group.members);group.averageExperience=stats.averageExperience;group.dominantPriceTier=stats.dominantPriceTier;group.categories=stats.categories;});setMembers(parsedMembers);setGroups(Array.from(existingGroups.values()));setLoading(false);}catch(err){console.error('Error loading CSV data:',err);setError('Failed to load member data');setLoading(false);}};const getUngroupedMembers=()=>{return members.filter(member=>!member.groupId);};const getSuggestionsForMember=memberId=>{const member=members.find(m=>m.id===memberId);if(!member)return[];return generateGroupSuggestions(member,groups);};const addMemberToGroup=(memberId,groupId)=>{setMembers(prev=>prev.map(member=>member.id===memberId?_objectSpread(_objectSpread({},member),{},{groupId}):member));setGroups(prev=>prev.map(group=>{if(group.id===groupId){const updatedMember=members.find(m=>m.id===memberId);if(updatedMember){const newMembers=[...group.members,_objectSpread(_objectSpread({},updatedMember),{},{groupId})];const stats=calculateGroupStats(newMembers);return _objectSpread(_objectSpread({},group),{},{members:newMembers,averageExperience:stats.averageExperience,dominantPriceTier:stats.dominantPriceTier,categories:stats.categories,lastActivity:new Date().toISOString().split('T')[0]});}}return group;}));};const createNewGroup=memberId=>{const member=members.find(m=>m.id===memberId);if(!member)return;const existingGroupNumbers=groups.map(g=>parseInt(g.id.replace('G',''))).filter(Boolean);const nextGroupNumber=Math.max(0,...existingGroupNumbers)+1;const groupId=\"G\".concat(nextGroupNumber);const updatedMember=_objectSpread(_objectSpread({},member),{},{groupId});setMembers(prev=>prev.map(m=>m.id===memberId?updatedMember:m));const newGroup={id:groupId,name:\"Group \".concat(nextGroupNumber),members:[updatedMember],averageExperience:0,dominantPriceTier:'',categories:[],createdDate:new Date().toISOString().split('T')[0],lastActivity:new Date().toISOString().split('T')[0]};const stats=calculateGroupStats(newGroup.members);newGroup.averageExperience=stats.averageExperience;newGroup.dominantPriceTier=stats.dominantPriceTier;newGroup.categories=stats.categories;setGroups(prev=>[...prev,newGroup]);};const removeMemberFromGroup=(memberId,groupId)=>{setMembers(prev=>prev.map(member=>member.id===memberId?_objectSpread(_objectSpread({},member),{},{groupId:undefined}):member));setGroups(prev=>prev.map(group=>{if(group.id===groupId){const newMembers=group.members.filter(m=>m.id!==memberId);if(newMembers.length===0){return null;// Mark for removal\n}const stats=calculateGroupStats(newMembers);return _objectSpread(_objectSpread({},group),{},{members:newMembers,averageExperience:stats.averageExperience,dominantPriceTier:stats.dominantPriceTier,categories:stats.categories,lastActivity:new Date().toISOString().split('T')[0]});}return group;}).filter(Boolean));};return{members,groups,loading,error,getUngroupedMembers,getSuggestionsForMember,addMemberToGroup,createNewGroup,removeMemberFromGroup,refreshData:loadCSVData};}","map":{"version":3,"names":["useState","useEffect","generateGroupSuggestions","calculateGroupStats","parseCSVToMembers","loadSecureMemberData","useMembers","members","setMembers","groups","setGroups","loading","setLoading","error","setError","loadCSVData","csvText","parsedMembers","existingGroups","Map","forEach","member","groupId","has","groupNumber","replace","set","id","name","concat","averageExperience","dominantPriceTier","categories","createdDate","Date","toISOString","split","lastActivity","group","get","push","stats","Array","from","values","err","console","getUngroupedMembers","filter","getSuggestionsForMember","memberId","find","m","addMemberToGroup","prev","map","_objectSpread","updatedMember","newMembers","createNewGroup","existingGroupNumbers","g","parseInt","Boolean","nextGroupNumber","Math","max","newGroup","removeMemberFromGroup","undefined","length","refreshData"],"sources":["/Users/mstiverson/Cursor/freeda_internal_match/src/hooks/useMembers.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Member, Group, GroupSuggestion } from '../types';\nimport { generateGroupSuggestions, calculateGroupStats } from '../utils/matching';\nimport { parseCSVToMembers } from '../utils/csvParser';\nimport { loadSecureMemberData } from '../data/members';\n\nexport function useMembers() {\n  const [members, setMembers] = useState<Member[]>([]);\n  const [groups, setGroups] = useState<Group[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Load real CSV data\n  useEffect(() => {\n    loadCSVData();\n  }, []);\n\n  const loadCSVData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Load the secure CSV data\n      const csvText = await loadSecureMemberData();\n      const parsedMembers = parseCSVToMembers(csvText);\n      \n      // Initialize groups from existing group assignments\n      const existingGroups = new Map<string, Group>();\n      \n      parsedMembers.forEach(member => {\n        if (member.groupId) {\n          if (!existingGroups.has(member.groupId)) {\n            const groupNumber = member.groupId.replace('G', '');\n            existingGroups.set(member.groupId, {\n              id: member.groupId,\n              name: `Group ${groupNumber}`,\n              members: [],\n              averageExperience: 0,\n              dominantPriceTier: '',\n              categories: [] as string[],\n              createdDate: new Date().toISOString().split('T')[0],\n              lastActivity: new Date().toISOString().split('T')[0]\n            });\n          }\n          const group = existingGroups.get(member.groupId)!;\n          group.members.push(member);\n        }\n      });\n\n             // Calculate group statistics\n       existingGroups.forEach(group => {\n         const stats = calculateGroupStats(group.members);\n         group.averageExperience = stats.averageExperience;\n         group.dominantPriceTier = stats.dominantPriceTier;\n         group.categories = stats.categories;\n       });\n\n      setMembers(parsedMembers);\n      setGroups(Array.from(existingGroups.values()));\n      setLoading(false);\n      \n    } catch (err) {\n      console.error('Error loading CSV data:', err);\n      setError('Failed to load member data');\n      setLoading(false);\n    }\n  };\n\n  const getUngroupedMembers = () => {\n    return members.filter(member => !member.groupId);\n  };\n\n  const getSuggestionsForMember = (memberId: string): GroupSuggestion[] => {\n    const member = members.find(m => m.id === memberId);\n    if (!member) return [];\n    \n    return generateGroupSuggestions(member, groups);\n  };\n\n  const addMemberToGroup = (memberId: string, groupId: string) => {\n    setMembers(prev => prev.map(member => \n      member.id === memberId \n        ? { ...member, groupId }\n        : member\n    ));\n\n    setGroups(prev => prev.map(group => {\n      if (group.id === groupId) {\n        const updatedMember = members.find(m => m.id === memberId);\n        if (updatedMember) {\n          const newMembers = [...group.members, { ...updatedMember, groupId }];\n          const stats = calculateGroupStats(newMembers);\n          return {\n            ...group,\n            members: newMembers,\n            averageExperience: stats.averageExperience,\n            dominantPriceTier: stats.dominantPriceTier,\n            categories: stats.categories,\n            lastActivity: new Date().toISOString().split('T')[0]\n          };\n        }\n      }\n      return group;\n    }));\n  };\n\n  const createNewGroup = (memberId: string) => {\n    const member = members.find(m => m.id === memberId);\n    if (!member) return;\n\n    const existingGroupNumbers = groups.map(g => parseInt(g.id.replace('G', ''))).filter(Boolean);\n    const nextGroupNumber = Math.max(0, ...existingGroupNumbers) + 1;\n    const groupId = `G${nextGroupNumber}`;\n\n    const updatedMember = { ...member, groupId };\n    \n    setMembers(prev => prev.map(m => \n      m.id === memberId ? updatedMember : m\n    ));\n\n    const newGroup = {\n      id: groupId,\n      name: `Group ${nextGroupNumber}`,\n      members: [updatedMember],\n      averageExperience: 0,\n      dominantPriceTier: '',\n      categories: [] as string[],\n      createdDate: new Date().toISOString().split('T')[0],\n      lastActivity: new Date().toISOString().split('T')[0]\n    };\n\n    const stats = calculateGroupStats(newGroup.members);\n    newGroup.averageExperience = stats.averageExperience;\n    newGroup.dominantPriceTier = stats.dominantPriceTier;\n    newGroup.categories = stats.categories;\n\n    setGroups(prev => [...prev, newGroup]);\n  };\n\n  const removeMemberFromGroup = (memberId: string, groupId: string) => {\n    setMembers(prev => prev.map(member => \n      member.id === memberId \n        ? { ...member, groupId: undefined }\n        : member\n    ));\n\n    setGroups(prev => prev.map(group => {\n      if (group.id === groupId) {\n        const newMembers = group.members.filter(m => m.id !== memberId);\n        if (newMembers.length === 0) {\n          return null; // Mark for removal\n        }\n        const stats = calculateGroupStats(newMembers);\n        return {\n          ...group,\n          members: newMembers,\n          averageExperience: stats.averageExperience,\n          dominantPriceTier: stats.dominantPriceTier,\n          categories: stats.categories,\n          lastActivity: new Date().toISOString().split('T')[0]\n        };\n      }\n      return group;\n    }).filter(Boolean) as Group[]);\n  };\n\n  return {\n    members,\n    groups,\n    loading,\n    error,\n    getUngroupedMembers,\n    getSuggestionsForMember,\n    addMemberToGroup,\n    createNewGroup,\n    removeMemberFromGroup,\n    refreshData: loadCSVData\n  };\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}